load("E:/myProc/R/vehicle/vehicle.RData")
typeof(vehicles)
vehicles[,"year"]
vehicles["year"]
vehicles[,"year"]
typeof(vehicles[,"year"])
typeof(vehicles["year"])
typeof(vehicles["fuelType"])
typeof(vehicles[,"fuelType"])
typeof(vehicles[,"fuelType"])
aaa = vehicles[,"fuelType"]
aaa[10]
aaa[107777]
aaa[1077771]
aaa[1071]
aaa = vehicles["fuelType"]
aaa[33]
typeof(aaa)
head(aaa)
aaa["fuelType"][10]
aaa[,"fuelType"][10]
unique(vehicles[,"year"])
unique(vehicles["year"])
length(unique(vehicles["year"]))
length(unique(vehicles[,"year"]))
length(vehicles)
vehicles&year
vehicles
vehicles[,"fuelType1"]
vehicles[,"year"]
length(vehicles[,"year"])
length(vehicles[,"trany"])
length(vehicles[,"fuelType1"])
length(vehicles$fuelType1)
length(vehicles$year)
vehicles$year
class(vehicles&year)
vehicles&year
vehicles$year
clas
class(vehicles$year)
table(vehicles$year)
View(aaa)
aaa = vehicles$year
aaa = table(vehicles$year)
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
View(list_data)
class(aaa)
table(vehicles$year)
table(vehicles$fuelType1)
View(vehicles)
vehicles$eng_dscr <- NA
head(vehicles$eng_dscr)
substr(vehicles$year, 1, 3)
substr(vehicles$year, 2, 3)
substr(vehicles$year, 3, 3)
substr(vehicles$year, 4, 3)
substr(vehicles$year, 4, 1)
substr(vehicles$year, 2, 1)
substr(vehicles$year, 2, -1)
substr(vehicles$year, -2, 1)
substr(vehicles$year, -3, 1)
substr(vehicles$year, -3, 3)
substr(vehicles$year, 1, 3)
table(vehicles$fuelType1, vehicles$year)
table(vehicles$fuelType1, vehicles$year, vehicles$feScore)
table(vehicles$fuelType1, vehicles$year, vehicles$feScore, vehicles$ghgScore)
table(vehicles$fuelType1, vehicles$year)
vehicles$trany[vehicles$trany==""] <- NA
vehicles$trany2 <- ifelse(substr(vehicles$trany,1 ,4) == "Auto", "Auto", "Manual")
table(vehicles$trany2)
library(swirl)
swirl()
sapply(flag_colors, mean)
flag_shapes <- flags[19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6)
)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals, length)
sapply(flags,sapply)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
vapply(flags, unique, 1)
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
Use tapply(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, 1:6, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris$Sepal.Length
mean(iris$Sepal.Length)
names(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$hp, mtcars$cyl, mean())
tapply(mtcars$hp, mtcars$cyl, mean
tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x["8"] - x["4"]
debug(ls)
ls()
iris
x <- data.frame(c(3,1,8),c(6,2,7))
x
x <- data.frame(a = c(3,1,8),b = c(6,2,7))
x
x[order(x$a)]
x[,order(x$a)]
x[order(x$a),]
x <- data.frame(a = c(3,1,8),b = c(6,2,7))
order(x$a)
x <- data.frame(a = c(3,1,1,8),b = c(6,2,1,7))
x[order(x$a),]
x[order(x$a,x$b),]
library(plyr)
arrange(x,c(a,b))
arrange(x,a)
arrange(x,desc)
arrange(x,desc(a))
x <- rnorm(10,mean=1,sd=10)
x
x <- rnorm(10,mean=1,sd=1\0)
x <- sample(1:100,10)
x
x <- sample(1:100,10)
x
library(Hmisc)
install.packages(Hmisc)
install.packages("Hmisc")
library("Hmisc")
y <- cut2(x,g=5)
y
table(y)
x <- sample(1:100,10)
y <- cut2(x,g=5)
table(y)
x <- sample(1:100,10)
y <- cut2(x,g=5)
table(y)
x <- c(1,100,99,98,97,96,95,94,93,92)
y <- cut2(x,g=5)
table(y)
x <- c(1,100,99,98,97,96,95,94,93,92)
y <- cut(x,g=5)
y <- cut(x)
?cut
library(reshape2)
head(mtcars,n=3)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
head(carMelt,3)
tail(carMelt,3)
a = c(1:10)
b = c(1:10)
c = c(1:10)
d = c(1:10)
e = c(1:10)
x = rbind(a=a,b=b,c=c,d=d,e=e)
x
x = cbind(a=a,b=b,c=c,d=d,e=e)
x
select(x,a:c)
library(dplyr)
install.packages(dplyr)
install.packages('dplyr')
library('dplyr')
select(x,a:c)
head(select(x,a:c))
class(x)
as.data.frame(x)
head(select(x,a:c))
x <- as.data.frame(x)
head(select(x,a:c))
head(select(x,c('a','c','d')))
head(select(x,-c('a','c','d')))
intersect(x$a,x$c)
intersect(x$a,x)
library(swirl)
swirl()
?read
?read.csv
path2csv
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
head(mydf)
head(cran)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
try 5:20
5:20
select(cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select( -(5:20))
select(cran,5:20)
select()
select(cran,- (x:size))
select(cran,-(x:size))
select(cran,-x:size)
select(cran,x:size)
select(cran,-cran$x:cran$size)
select(cran,-(cran$x:cran$size)
)
select(cran,-(X:size)
)
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, version<= "3.0.2")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, strictly>100500, r_os= "linux-gnu")
filter(cran, strictly>100500, r_os== "linux-gnu")
filter(cran, size>100500, r_os== "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5,
| NA, 10))
!is.na(c(3, 5,NA, 10))
filter(cran, !is.na())
filter(cran, !is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2,  desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(package), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<- select(cran,ip_id,package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size -1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package,mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
arrange(top_counts,desc(count))
arrange(top_counts, desc(count))
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,unique)
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
submit()
submit()
submit()
?gather
submit()
?spread
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
submit()
?parse_number
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed,failed)
sat
?separate
submit()
submit()
setwd("E:\\myProc\\R")
setwd("E:\\myProc\\R\\Getting-and-Cleaning-Data-Coursera\\week3")
?download.file
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
head(communities)
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
agricultureLogical <- communities[ communities$ACR == 3 & communities$AGS == 6 ,]
agricultureLogical
which(agricultureLogical)
agricultureLogical <- communities[, communities$ACR == 3 & communities$AGS == 6]
agricultureLogical <- communities[ communities$ACR == 3 & communities$AGS == 6 ,]
agricultureLogical <- communities$ACR == 3 & communities$AGS == 6
agricultureLogical
which(agricultureLogical)
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
which(agricultureLogical)
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
head(which(agricultureLogical),3)
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
library(jpeg )
library("jpeg")
install.packages("jpeg")
library("jpeg")
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
picture
picture[30]
picture[80]
picture[[30]]
quantile(picture, probs = c(0.3, 0.8))
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
head(ranked)
head(educational)
View(ranked)
View(educational)
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
GDP$X
GDP$X != ""
GDP[GDP$X != ""]
GDP[GDP$X != "",]
library("dplyr")
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
GDP
?merge
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
debugSource('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
GDP
debugSource('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
head(GDP)
debugSource('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
debugSource('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
debugSource('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
xxx
head(xxx)
debugSource('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
View(xxx)
debugSource('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
View(xxx)
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
sum(!is.na(unique(edu_GDP$rankingGDP)))
sum(!is.na(unique(edu_GDP$Ranking)))
View(GDP)
View(edu_GDP)
table(edu_GDP$Ranking)
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
GDP
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
sum(!is.na(unique(edu_GDP$Ranking)))
table(edu_GDP$Ranking)
View(GDP)
?order
order(edu_GDP, edu_GDP$Ranking)
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
View(edu_GDP)
arrange(edu_GDP,desc(edu_GDP$Ranking))
head(arrange(edu_GDP,desc(edu_GDP$Ranking)))
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
unique(edu_GDP$Ranking)
sum(unique(edu_GDP$Ranking))
print(sum(!is.na(unique(edu_GDP$Ranking))))
odr_GDP[23]
odr_GDP[[23]]
odr_GDP[,13]
odr_GDP[13,]
source('E:/myProc/R/Getting-and-Cleaning-Data-Coursera/week3/quiz3.R')
View(edu_GDP)
gp <- group_by(edu_GDP,edu_GDP$Income.Group)
head(gp)
edu_GDP[, mean(Ranking, na.rm = TRUE), by = Income.Group]
edu_GDP[, mean(edu_GDP, na.rm = TRUE), by = Income.Group]
